/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.deepin.Manual.Search.xml -a manual_search_adapter -c ManualSearchAdapter
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "manual_search_adapter.h"

/*
 * Implementation of adaptor class ManualSearchAdapter
 */

ManualSearchAdapter::ManualSearchAdapter(QObject *parent)
    : QObject(parent)
{
    // constructor
}

ManualSearchAdapter::~ManualSearchAdapter()
{
    // destructor
}

/**
 * @brief ManualSearchAdapter::ManualExists
 * @param in0
 * @return
 */
bool ManualSearchAdapter::ManualExists(const QString &in0)
{
    // handle method call com.deepin.Manual.Search.ManualExists
    bool out0;
    qInfo() << QString("ManualSearchAdapter::ManualExists app:%1 invokepath:%2.").arg(in0).arg(invokePath());
    QMetaObject::invokeMethod(parent(), "ManualExists", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

/**
 * @brief ManualSearchAdapter::OnNewWindowOpen
 * @param data
 */
void ManualSearchAdapter::OnNewWindowOpen(const QString &data)
{
    QMetaObject::invokeMethod(parent(), "OnNewWindowOpen", Q_ARG(QString, data));
}

QString ManualSearchAdapter::invokePath()
{
    bool valid = false;
    QDBusConnection conn = connection();
    QDBusMessage msg = message();

    //判断是否存在执行路径
    uint pid = conn.interface()->servicePid(msg.service()).value();
    QFileInfo f(QString("/proc/%1/exe").arg(pid));
    if (!f.exists()) {
        valid = false;
    } else {
        valid = true;
    }

    //是否存在于可调用者名单中
    QStringList ValidInvokerExePathList;
    QString invokerPath = f.canonicalFilePath();
    return invokerPath + " pid: " + QString::number(pid);
}
